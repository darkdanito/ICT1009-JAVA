package necrodiver;

import java.util.*;
import java.io.*;
public class MiniChallenge2 {

	public static boolean isPalindrome(Queue<Character> inQueue, Stack<Character> inStack){
		boolean palindrome = true;
        while (!inQueue.isEmpty())
   		   if (!(inQueue.remove().equals(inStack.pop()))) palindrome = false;
		return palindrome;
	}

	public static void main(String[] args) throws IOException 
	{
		char inChar;
		Queue<Character> myQueue = new LinkedList<Character>();
		Stack<Character> myStack = new Stack<Character>();
		
		do
		{
			System.out.print("Enter suspected palindrome: ");
			
			do 
			{
				
				inChar = (char)System.in.read(); 
				
	        	if (inChar == '*')
	        	{
	        		System.exit(0);	
	        	}
				
		        if ((inChar != '\r')&&(inChar != '\n')&&(Character.isLetter(inChar)))
		        {

		        			        	
		        	inChar = Character.toLowerCase(inChar);
		        	System.out.print(inChar);
		    	   
		        	myQueue.add(inChar);
		        	myStack.push(inChar);  	
		        }
		        
		    } while (inChar != '\r');
					
			System.out.println();
			if (isPalindrome(myQueue, myStack)) System.out.println("It is a palindrome");
			else System.out.println("It is not a palindrome");
			
		} while (inChar != '*');		
		
		
	}
}


/**
 * 	       
    	 	public static boolean isPalindrome(Queue<Character> inQueue, Stack<Character> inStack){
		boolean palindrome = true;
        while (!inQueue.isEmpty())
   		   if (!(inQueue.remove().equals(inStack.pop()))) palindrome = false;
		return palindrome;
	}

	public static void main(String[] args) throws IOException 
	{
		char inChar;
		Queue<Character> myQueue = new LinkedList<Character>();
		Stack<Character> myStack = new Stack<Character>();
		
		System.out.print("Enter suspected palindrome: ");	
		
		do 
		{
	       inChar = (char)System.in.read();
	       
	       if ((inChar != '\r')&&(inChar != '\n')&&(Character.isLetter(inChar)))
	       {
	    	   inChar = Character.toLowerCase(inChar);
	    	   System.out.print(inChar);
	    	   
	    	   myQueue.add(inChar);
	    	   myStack.push(inChar);
	       }
	    } while (inChar != '\r');
		
		System.out.println();
		if (isPalindrome(myQueue, myStack)) System.out.println("It is a palindrome");
		else System.out.println("It is not a palindrome");
	}

 * 
 * 
 * */
